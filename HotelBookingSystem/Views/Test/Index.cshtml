@{
    ViewData["Title"] = "Test Notifications";
}

<style>
    .btn-purple {
        background-color: #6f42c1;
        border-color: #6f42c1;
        color: white;
    }

    .btn-purple:hover {
        background-color: #5a359a;
        border-color: #5a359a;
        color: white;
    }
</style>

<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <h2>üß™ Test Notification System</h2>
            <p class="text-muted">D√πng ƒë·ªÉ test h·ªá th·ªëng th√¥ng b√°o real-time</p>

            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Customer Notifications Test</h5>

                    <button class="btn btn-primary me-2" onclick="testCustomerNotification()">
                        <i class="fas fa-bell"></i> Test Customer Notification
                    </button>

                    <button class="btn btn-info me-2" onclick="testPaymentNotification()">
                        <i class="fas fa-credit-card"></i> Test Payment Notification
                    </button>

                    <button class="btn btn-success me-2" onclick="testBookingConfirmation()">
                        <i class="fas fa-check-circle"></i> Test Booking Confirmation
                    </button>

                    <hr>

                    <h5 class="card-title">Admin Notifications Test</h5>

                    <button class="btn btn-warning me-2" onclick="testCancellationNotification()">
                        <i class="fas fa-times-circle"></i> Test Customer Cancellation
                    </button>

                    <button class="btn btn-purple me-2" onclick="testReviewNotification()">
                        <i class="fas fa-star"></i> Test Customer Review
                    </button>

                    <button class="btn btn-secondary me-2" onclick="testAdminNotification()">
                        <i class="fas fa-cog"></i> Test Admin General
                    </button>

                    <hr>

                    <h5 class="card-title">Debug Information</h5>
                    <div id="debugInfo" class="bg-light p-3 rounded">
                        <p><strong>User ID:</strong>
                            @(User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value ?? "N/A")</p>
                        <p><strong>User Name:</strong> @(User.Identity?.Name ?? "N/A")</p>
                        <p><strong>Is Authenticated:</strong> @User.Identity.IsAuthenticated</p>
                        <p><strong>Is Admin:</strong> @User.IsInRole("Admin")</p>
                    </div>

                    <hr>

                    <h5 class="card-title">Test Results</h5>
                    <div id="testResults" class="alert alert-info" style="display: none;">
                        Test results will appear here...
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        console.log("üß™ Test page loaded");

        async function testCustomerNotification() {
            try {
                showLoading("Testing customer notification...");

                const response = await fetch('/Test/TestCustomerNotification', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    }
                });

                const result = await response.json();
                showResult(result);

                if (result.success) {
                    showSuccess("‚úÖ Customer notification sent! Check console for logs.");
                } else {
                    showError("‚ùå Failed: " + result.message);
                }
            } catch (error) {
                showError("‚ùå Error: " + error.message);
                console.error("Test error:", error);
            }
        }

        async function testPaymentNotification() {
            try {
                showLoading("Testing payment notification...");

                // We'll use the same endpoint but with different message
                const response = await fetch('/Test/TestCustomerNotification', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    }
                });

                const result = await response.json();
                showResult(result);

                if (result.success) {
                    showSuccess("‚úÖ Payment notification test completed!");
                } else {
                    showError("‚ùå Failed: " + result.message);
                }
            } catch (error) {
                showError("‚ùå Error: " + error.message);
            }
        }

        async function testBookingConfirmation() {
            try {
                showLoading("Testing booking confirmation...");

                const response = await fetch('/Test/TestCustomerNotification', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    }
                });

                const result = await response.json();
                showResult(result);

                if (result.success) {
                    showSuccess("‚úÖ Booking confirmation test completed!");
                } else {
                    showError("‚ùå Failed: " + result.message);
                }
            } catch (error) {
                showError("‚ùå Error: " + error.message);
            }
        }

        async function testCancellationNotification() {
            try {
                showLoading("Testing customer cancellation notification to admin...");

                const response = await fetch('/Test/TestCancellationNotification', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    }
                });

                const result = await response.json();
                showResult(result);

                if (result.success) {
                    showSuccess("‚úÖ Customer cancellation notification sent to admins!");
                } else {
                    showError("‚ùå Failed: " + result.message);
                }
            } catch (error) {
                showError("‚ùå Error: " + error.message);
                console.error("Test error:", error);
            }
        }

        async function testReviewNotification() {
            try {
                showLoading("Testing customer review notification to admin...");

                const response = await fetch('/Test/TestReviewNotification', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    }
                });

                const result = await response.json();
                showResult(result);

                if (result.success) {
                    showSuccess("‚úÖ Customer review notification sent to admins!");
                } else {
                    showError("‚ùå Failed: " + result.message);
                }
            } catch (error) {
                showError("‚ùå Error: " + error.message);
                console.error("Test error:", error);
            }
        }

        async function testAdminNotification() {
            try {
                showLoading("Testing admin notification...");

                const response = await fetch('/Test/TestAdminNotification', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    }
                });

                const result = await response.json();
                showResult(result);

                if (result.success) {
                    showSuccess("‚úÖ Admin notification sent!");
                } else {
                    showError("‚ùå Failed: " + result.message);
                }
            } catch (error) {
                showError("‚ùå Error: " + error.message);
                console.error("Test error:", error);
            }
        }

        function showLoading(message) {
            const resultsDiv = document.getElementById('testResults');
            resultsDiv.className = 'alert alert-info';
            resultsDiv.style.display = 'block';
            resultsDiv.innerHTML = `<i class="fas fa-spinner fa-spin"></i> ${message}`;
        }

        function showSuccess(message) {
            const resultsDiv = document.getElementById('testResults');
            resultsDiv.className = 'alert alert-success';
            resultsDiv.style.display = 'block';
            resultsDiv.innerHTML = message;
        }

        function showError(message) {
            const resultsDiv = document.getElementById('testResults');
            resultsDiv.className = 'alert alert-danger';
            resultsDiv.style.display = 'block';
            resultsDiv.innerHTML = message;
        }

        function showResult(result) {
            console.log("üîç Test result:", result);
        }

        // Monitor SignalR connection
        window.addEventListener('load', function () {
            setTimeout(() => {
                if (window.globalNotificationManager) {
                    console.log("‚úÖ Global notification manager is available");
                } else {
                    console.warn("‚ö†Ô∏è Global notification manager not found");
                }

                // Check notification count
                const count = window.getUnreadNotificationCount ? window.getUnreadNotificationCount() : 0;
                console.log(`üìä Current unread notifications: ${count}`);
            }, 2000);
        });
    </script>
}

@Html.AntiForgeryToken()
